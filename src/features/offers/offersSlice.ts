import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'
// import {Offer} from '../../types/types'
//
// export interface OffersState {
//   offers: Offer[]
//   status: 'idle' | 'loading' | 'failed'
// }
//
// const initialState: OffersState = {
//   offers: [],
//   status: 'idle',
// }
//
// // The function below is called a thunk and allows us to perform async logic. It
// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// // will call the thunk with the `dispatch` function as the first argument. Async
// // code can then be executed and other actions can be dispatched. Thunks are
// // typically used to make async requests.
// export const getOffersAsync = createAsyncThunk('offers/getOffers', async () => {
//   const response = await getOffers()
//   // The value we return becomes the `fulfilled` action payload
//   return response.data
// })
// export const postOffersAsync = createAsyncThunk(
//   'offers/postOffers',
//   async (payload: OffersReqBody) => {
//     const response = await postOffers(payload)
//     // The value we return becomes the `fulfilled` action payload
//     return response.data
//   },
// )
//
// export const offersSlice = createSlice({
//   name: 'offersss',
//   initialState,
//   // The `reducers` field lets us define reducers and generate associated actions
//   reducers: {
//     setOffers: (state, action: PayloadAction<Offer[]>) => {
//       // Redux Toolkit allows us to write "mutating" logic in reducers. It
//       // doesn't actually mutate the state because it uses the Immer library,
//       // which detects changes to a "draft state" and produces a brand new
//       // immutable state based off those changes
//       state.offers = action.payload
//     },
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(getOffersAsync.pending, (state, action) => {
//         state.status = 'loading'
//       })
//       .addCase(getOffersAsync.fulfilled, (state, action) => {
//         state.status = 'idle'
//         state.offers = action.payload.offers
//       })
//   },
// })
//
// export const {setOffers} = offersSlice.actions
//
// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/explicit-function-return-type
// export const selectCount = (state: RootState) => state.counter.value
//
// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState,
// ) => {
//   const currentValue = selectCount(getState())
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount))
//   }
// }
//
// export default offersSlice.reducer
